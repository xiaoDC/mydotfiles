;; -*- mode: emacs-lisp -*-
;; This file is loaded by Spacemacs at startup.
;; It must be stored in your home directory.

(defun dotspacemacs/layers ()
  "Configuration Layers declaration.
You should not put any user code in this function besides modifying the variable
values."
  (setq-default
   ;; Base distribution to use. This is a layer contained in the directory
   ;; `+distribution'. For now available distributions are `spacemacs-base'
   ;; or `spacemacs'. (default 'spacemacs)
   dotspacemacs-distribution 'spacemacs
   ;; List of additional paths where to look for configuration layers.
   ;; Paths must have a trailing slash (i.e. `~/.mycontribs/')
   dotspacemacs-configuration-layer-path '()
   ;; List of configuration layers to load. If it is the symbol `all' instead
   ;; of a list then all discovered layers will be installed.
   dotspacemacs-configuration-layers
    '(
       yaml
     ;; ----------------------------------------------------------------
     ;; Example of useful layers you may want to use right away.
     ;; Uncomment some layer names and press <SPC f e R> (Vim style) or
     ;; <M-m f e R> (Emacs style) to install them.
     ;; ----------------------------------------------------------------
     better-defaults
     git
     osx
     markdown
     (vinegar :variables vinegar-reuse-dired-buffer t)
     org
     version-control
     html
     ;; javascript
     ;; (javascript :variables tern-command '("/Users/chenglong/.nvm/versions/node/v6.0.0/bin/node" "/Users/chenglong/.nvm/versions/node/v6.0.0/bin/tern"))
     (auto-completion :variables auto-completion-enable-sort-by-usage t
                      auto-completion-enable-help-tooltip t
                      auto-completion-enable-snippets-in-popup t
                      :disabled-for org markdown)
     )
  ;; List of additional packages that will be installed without being
  ;; wrapped in a layer. If you need some configuration for these
  ;; packages, then consider creating a layer. You can also put the
  ;; configuration in `dotspacemacs/user-config'.
  dotspacemacs-additional-packages '(
                                     js2-mode
                                     coffee-mode
                                     tern
                                     neotree
                                     git-gutter+
                                     git-gutter-fringe+
                                     highlight-indent-guides
                                     editorconfig
                                     find-file-in-project
                                     youdao-dictionary
                                     ;; evil-indent-plus
                                     exec-path-from-shell
                                     )
  ;; A list of packages and/or extensions that will not be install and loaded.
  dotspacemacs-excluded-packages '(counsel-projectile
                                      alert
                                      magit-gh-pulls
                                      magit-gitflow
                                      org-projectile
                                      evil-mc
                                      nose
                                      evil-args
                                      evil-ediff
                                      evil-exchange
                                      evil-unimpaired
                                      ;; evil-indent-plus
                                      centered-buffer-mode
                                      volatile-highlights
                                      spell-checking
                                      syntax-checking
                                      nyan-mode

                                      ;; exec-path-from-shell
                                      company-tern
                                      multiple-cursors
                                      dash-functional

                                      ;; spaceline
                                      holy-mode
                                      eyebrowse
                                      skewer-mode
                                      highlight-indentation
                                      vi-tilde-fringe
                                      hl-anything
                                      org-bullets
                                      smooth-scrolling
                                      org-repo-todo
                                      org-download
                                      ranger
                                      open-junk-file
                                      dash
                                      org-timer
                                      livid-mode
                                      evil-escape
                                      leuven-theme
                                      gh-md
                                      evil-lisp-state
                                      spray
                                      lorem-ipsum
                                      ac-ispell
                                      ace-jump-mode
                                      auto-dictionary
                                      clang-format
                                      define-word
                                      google-translate
                                      disaster
                                      epic
                                      fancy-battery
                                      org-present
                                      orgit
                                      orglue
                                      helm-flyspell
                                      flyspell-correct-helm
                                      helm-c-yasnippet
                                      ;; ace-jump-helm-line
                                      helm-make
                                      ;; helm-projectile
                                      helm-themes
                                      ;; helm-swoop
                                      helm-spacemacs-help
                                    )
  ;; If non-nil spacemacs will delete any orphan packages, i.e. packages that
  ;; are declared in a layer which is not a member of
  ;; the list `dotspacemacs-configuration-layers'. (default t)
  dotspacemacs-download-packages 'used
  dotspacemacs-delete-orphan-packages t))

(defun dotspacemacs/init ()
  "Initialization function.
This function is called at the very startup of Spacemacs initialization
before layers configuration.
You should not put any user code in there besides modifying the variable
values."
  ;; This setq-default sexp is an exhaustive list of all the supported
  ;; spacemacs settings.
  (setq-default
    ;; If non nil ELPA repositories are contacted via HTTPS whenever it's
    ;; possible. Set it to nil if you have no way to use HTTPS in your
    ;; environment, otherwise it is strongly recommended to let it set to t.
    ;; This variable has no effect if Emacs is launched with the parameter
    ;; `--insecure' which forces the value of this variable to nil.
    ;; (default t)
    dotspacemacs-elpa-https t
    ;; Maximum allowed time in seconds to contact an ELPA repository.
    dotspacemacs-elpa-timeout 5
    ;; If non nil then spacemacs will check for updates at startup
    ;; when the current branch is not `develop'. (default t)
    ;; dotspacemacs-check-for-update nil
    dotspacemacs-check-for-update t
    ;; One of `vim', `emacs' or `hybrid'. Evil is always enabled but if the
    ;; variable is `emacs' then the `holy-mode' is enabled at startup. `hybrid'
    ;; uses emacs key bindings for vim's insert mode, but otherwise leaves evil
    ;; unchanged. (default 'vim)
    dotspacemacs-editing-style 'vim
    ;; If non nil output loading progress in `*Messages*' buffer. (default nil)
    dotspacemacs-verbose-loading nil
    ;; Specify the startup banner. Default value is `official', it displays
    ;; the official spacemacs logo. An integer value is the index of text
    ;; banner, `random' chooses a random text banner in `core/banners'
    ;; directory. A string value must be a path to an image format supported
    ;; by your Emacs build.
    ;; If the value is nil then no banner is displayed. (default 'official)
    dotspacemacs-startup-banner 'official
    ;; List of items to show in the startup buffer. If nil it is disabled.
    ;; Possible values are: `recents' `bookmarks' `projects'.
    ;; (default '(recents projects))
    dotspacemacs-startup-lists '(
                                  ;; (recents . 10)
                                  ;; (projects . 10)
                                  )
    ;; Number of recent files to show in the startup buffer. Ignored if
    ;; `dotspacemacs-startup-lists' doesn't include `recents'. (default 5)
    ;; dotspacemacs-startup-recent-list-size 10
    ;; Default major mode of the scratch buffer (default `text-mode')
    dotspacemacs-scratch-mode 'text-mode
    ;; List of themes, the first of the list is loaded when spacemacs starts.
    ;; Press <SPC> T n to cycle to the next theme in the list (works great
    ;; with 2 themes variants, one dark and one light)
    dotspacemacs-themes '(
                           solarized-dark
                           spacemacs-dark
                           monokai
                           )
    ;; If non nil the cursor color matches the state color in GUI Emacs.
    dotspacemacs-colorize-cursor-according-to-state t
    ;; Default font. `powerline-scale' allows to quickly tweak the mode-line
    ;; size to make separators look not too crappy.
    dotspacemacs-default-font '(
                                 ;; "Source Code Pro"
                                 "Menlo"
                                 ;; "Monaco"
                                 ;; "Consolas"
                                 :size 13
                                 :weight normal
                                 :width normal
                                 :powerline-scale 1.4)
    ;; The leader key
    dotspacemacs-leader-key "SPC"
    ;; The leader key accessible in `emacs state' and `insert state'
    ;; (default "M-m")
    dotspacemacs-emacs-leader-key "M-m"
    ;; Major mode leader key is a shortcut key which is the equivalent of
    ;; pressing `<leader> m`. Set it to `nil` to disable it. (default ",")
    dotspacemacs-major-mode-leader-key ","
    ;; Major mode leader key accessible in `emacs state' and `insert state'.
    ;; (default "C-M-m)
    dotspacemacs-major-mode-emacs-leader-key "C-M-m"
    ;; These variables control whether separate commands are bound in the GUI to
    ;; the key pairs C-i, TAB and C-m, RET.
    ;; Setting it to a non-nil value, allows for separate commands under <C-i>
    ;; and TAB or <C-m> and RET.
    ;; In the terminal, these pairs are generally indistinguishable, so this only
    ;; works in the GUI. (default nil)
    dotspacemacs-distinguish-gui-tab nil
    dotspacemacs-large-file-size 1
    ;; (Not implemented) dotspacemacs-distinguish-gui-ret nil
    ;; The command key used for Evil commands (ex-commands) and
    ;; Emacs commands (M-x).
    ;; By default the command key is `:' so ex-commands are executed like in Vim
    ;; with `:' and Emacs commands are executed with `<leader> :'.
    dotspacemacs-command-key ":"
    ;; If non nil `Y' is remapped to `y$'. (default t)
    dotspacemacs-remap-Y-to-y$ t
    ;; Name of the default layout (default "Default")
    dotspacemacs-default-layout-name "Default"
    ;; If non nil the default layout name is displayed in the mode-line.
    ;; (default nil)
    dotspacemacs-display-default-layout nil
    ;; If non nil then the last auto saved layouts are resume automatically upon
    ;; start. (default nil)
    dotspacemacs-auto-resume-layouts nil
    ;; Location where to auto-save files. Possible values are `original' to
    ;; auto-save the file in-place, `cache' to auto-save the file to another
    ;; file stored in the cache directory and `nil' to disable auto-saving.
    ;; (default 'cache)
    dotspacemacs-auto-save-file-location 'cache
    ;; Maximum number of rollback slots to keep in the cache. (default 5)
    dotspacemacs-max-rollback-slots 5
    ;; If non nil then `ido' replaces `helm' for some commands. For now only
    ;; `find-files' (SPC f f), `find-spacemacs-file' (SPC f e s), and
    ;; `find-contrib-file' (SPC f e c) are replaced. (default nil)
    dotspacemacs-use-ido nil
    ;; If non nil, `helm' will try to minimize the space it uses. (default nil)
    dotspacemacs-helm-resize nil
    ;; if non nil, the helm header is hidden when there is only one source.
    ;; (default nil)
    dotspacemacs-helm-no-header nil
    ;; define the position to display `helm', options are `bottom', `top',
    ;; `left', or `right'. (default 'bottom)
    dotspacemacs-helm-position 'bottom
    ;; If non nil the paste micro-state is enabled. When enabled pressing `p`
    ;; several times cycle between the kill ring content. (default nil)
    dotspacemacs-enable-paste-micro-state nil
    ;; Which-key delay in seconds. The which-key buffer is the popup listing
    ;; the commands bound to the current keystroke sequence. (default 0.4)
    dotspacemacs-which-key-delay 0.4
    ;; Which-key frame position. Possible values are `right', `bottom' and
    ;; `right-then-bottom'. right-then-bottom tries to display the frame to the
    ;; right; if there is insufficient space it displays it at the bottom.
    ;; (default 'bottom)
    dotspacemacs-which-key-position 'bottom
    ;; If non nil a progress bar is displayed when spacemacs is loading. This
    ;; may increase the boot time on some systems and emacs builds, set it to
    ;; nil to boost the loading time. (default t)
    dotspacemacs-loading-progress-bar t
    ;; If non nil the frame is fullscreen when Emacs starts up. (default nil)
    ;; (Emacs 24.4+ only)
    dotspacemacs-fullscreen-at-startup nil
    ;; If non nil `spacemacs/toggle-fullscreen' will not use native fullscreen.
    ;; Use to disable fullscreen animations in OSX. (default nil)
    dotspacemacs-fullscreen-use-non-native nil
    ;; If non nil the frame is maximized when Emacs starts up.
    ;; Takes effect only if `dotspacemacs-fullscreen-at-startup' is nil.
    ;; (default nil) (Emacs 24.4+ only)
    dotspacemacs-maximized-at-startup nil
    ;; dotspacemacs-maximized-at-startup t
    ;; A value from the range (0..100), in increasing opacity, which describes
    ;; the transparency level of a frame when it's active or selected.
    ;; Transparency can be toggled through `toggle-transparency'. (default 90)
    dotspacemacs-active-transparency 90
    ;; A value from the range (0..100), in increasing opacity, which describes
    ;; the transparency level of a frame when it's inactive or deselected.
    ;; Transparency can be toggled through `toggle-transparency'. (default 90)
    dotspacemacs-inactive-transparency 90
    ;; If non nil unicode symbols are displayed in the mode line. (default t)
    dotspacemacs-mode-line-unicode-symbols t
    ;; If non nil smooth scrolling (native-scrolling) is enabled. Smooth
    ;; scrolling overrides the default behavior of Emacs which recenters the
    ;; point when it reaches the top or bottom of the screen. (default t)
    dotspacemacs-smooth-scrolling nil
    ;; If non nil line numbers are turned on in all `prog-mode' and `text-mode'
    ;; derivatives. If set to `relative', also turns on relative line numbers.
    ;; (default nil)
    dotspacemacs-line-numbers nil
    ;; If non-nil smartparens-strict-mode will be enabled in programming modes.
    ;; (default nil)
    dotspacemacs-smartparens-strict-mode nil
    ;; Select a scope to highlight delimiters. Possible values are `any',
    ;; `current', `all' or `nil'. Default is `all' (highlight any scope and
    ;; emphasis the current one). (default 'all)
    dotspacemacs-highlight-delimiters 'all
    ;; If non nil advises quit functions to keep server open when quitting.
    ;; (default nil)
    dotspacemacs-persistent-server nil
    ;; List of search tool executable names. Spacemacs uses the first installed
    ;; tool of the list. Supported tools are `ag', `pt', `ack' and `grep'.
    ;; (default '("ag" "pt" "ack" "grep"))
    dotspacemacs-search-tools '("ag" "pt" "ack" "grep")
    ;; The default package repository used if no explicit repository has been
    ;; specified with an installed package.
    ;; Not used for now. (default nil)
    dotspacemacs-default-package-repository nil
    ;; Delete whitespace while saving buffer. Possible values are `all'
    ;; to aggressively delete empty line and long sequences of whitespace,
    ;; `trailing' to delete only the whitespace at end of lines, `changed'to
    ;; delete only whitespace for changed lines or `nil' to disable cleanup.
    ;; (default nil)
    dotspacemacs-whitespace-cleanup nil
    dotspacemacs-whitespace-cleanup 'changed
    ))


(defun dotspacemacs/user-init ()
  "Initialization function for user code.
It is called immediately after `dotspacemacs/init', before layer configuration
executes.
 This function is mostly useful for variables that need to be set
before packages are loaded. If you are unsure, you should try in setting them in
`dotspacemacs/user-config' first."
  (setq configuration-layer--elpa-archives
        '(("melpa-cn" . "http://elpa.zilongshanren.com/melpa/")
          ("org-cn"   . "http://elpa.zilongshanren.com/org/")
          ("gnu-cn"   . "http://elpa.zilongshanren.com/gnu/")))


  ;; https://github.com/syl20bnr/spacemacs/issues/2705
  ;; (setq tramp-mode nil)
  (setq tramp-ssh-controlmaster-options
        "-o ControlMaster=auto -o ControlPath='tramp.%%C' -o ControlPersist=no")

  ;; ss proxy. But it will cause anacond-mode failed.
  (setq socks-server '("Default server" "127.0.0.1" 1080 5))
  (setq evil-shift-round nil)
  (setq byte-compile-warnings '(not obsolete))
  (setq exec-path-from-shell-arguments '("-l"))
  )


(defun dotspacemacs/user-config ()
  "Configuration function for user code.
This function is called at the very end of Spacemacs initialization after
layers configuration.
This is the place where most of your configurations should be done. Unless it is
explicitly specified that a variable should be set before a package is loaded,
you should place your code here."

  ;; ======================= setting by myself ===================
  (spacemacs|add-company-hook 'text-mode)
  (add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))

  (exec-path-from-shell-initialize)
  (setq pop-up-windows nil)
  (setq ns-pop-up-frames nil)
  (global-hungry-delete-mode t)
  ;; (add-hook 'text-mode-hook 'spacemacs/toggle-spelling-checking-on)
  ;; 不生成备份文件
  (setq make-backup-files nil)
  ;; 更改 css 文件注释样式
  (add-hook 'css-mode-hook
            (lambda ()
              ;; Preferred comment style
              (setq comment-start "// "
                    comment-end "")))

  ;; 实时加载最新文件
  (setq load-prefer-newer t)
  (setq-default line-spacing 3)

  ;; 显示行号
  (global-linum-mode)
  (linum-relative-global-mode)
  (setq magit-commit-show-diff nil
        magit-revert-buffers 1)
  (setq helm-buffer-max-length 50)

  (menu-bar-mode -99)
  (tool-bar-mode -99)


  (add-hook 'after-init-hook 'init-emacs)
  ;; (global-flycheck-mode)
  ;; (add-to-list 'company-backends 'company-tern)
  (global-company-mode t)
  ;; (use-package company
  ;;   :config (add-hook 'prog-mode-hook 'company-mode))
  ;; (use-package tern
  ;;   :config
  ;;   (bind-key "C-c C-c" 'compile tern-mode-keymap)
  ;;   (when (eq system-type 'windows-nt) (setq tern-command '("cmd" "/c" "tern")))
  ;;   (add-hook 'js2-mode-hook 'tern-mode))

  ;; (setq company-tern-meta-as-single-line t)

  ;; 显示缩进线
  ;; (spacemacs/toggle-indent-guide-globally-on)
  ;; (require 'highlight-indent-guides)
  (add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
  (add-hook 'scss-mode-hook 'highlight-indent-guides-mode)
  (setq highlight-indent-guides-method 'character)
  ;; (set-face-foreground 'highlight-indent-guides-character-face "dimgray")
  ;; (set-face-background 'highlight-indentation-face "#e3e3d3")
  ;; (add-to-hooks 'spacemacs/load-yasnippet '(prog-mode-hook
  ;;                                            markdown-mode-hook
  ;;                                            org-mode-hook))

  ;; 设置补全忽略大小写
  (setq completion-ignore-case t)
  ;; 设置读取 buffer 忽略大小写
  (setq read-buffer-completion-ignore-case t)
  (setq read-file-name-completion-ignore-case t)
  (setq pcomplete-ignore-case t)
  ;; (setq-default fill-column 80)

  (add-to-list 'auto-mode-alist '("\\.js\\'\\|\\.jsx$\\|\\.json\\'" . js2-mode))
  (add-to-list 'auto-mode-alist '("\\.scss\\'" . scss-mode))
  ;; (add-hook 'js2-mode-hook (lambda () (electric-indent-local-mode -1)))
  (setq js-indent-level 2)
  (setq css-indent-offset 2)
  ;; (custom-set-variables
  ;;   '(js2-basic-offset 2)
  ;;   '(js2-bounce-indent-p t)
  ;;   )

  (editorconfig-mode 1)
  ;; git-gutter
  (global-git-gutter+-mode)
  ;; 设置 git-gutter
  (setq-default left-fringe-width 15)
  (setq git-gutter-fr+-side 'left-fringe)

  ;; (add-hook 'dired-mode-hook 'diff-hl-dired-mode)
  ;; (add-hook 'dired-mode-hook 'diff-hl-margin-mode)
  ;; (setq diff-hl-margin-side left)
  (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)

  ;; (setq-default neo-show-updir-line t)
  (setq-default neo-show-hidden-files nil)

  (spacemacs/set-leader-keys "gp" 'git-gutter+-previous-hunk)
  (spacemacs/set-leader-keys "gn" 'git-gutter+-next-hunk)
  (spacemacs/set-leader-keys "dt" 'magit-diff-working-tree)
  (spacemacs/set-leader-keys "gb" 'magit-blame)
  (spacemacs/set-leader-keys "gh" 'magit-log-all)
  (spacemacs/set-leader-keys "gg" 'magit-log-all-branches)
  (spacemacs/set-leader-keys "mp" 'markdown-live-preview-mode)
  (spacemacs/set-leader-keys "jj" 'avy-goto-char)
  (spacemacs/set-leader-keys "hh" 'evil-avy-goto-line)
  ;; Enable Cache
  (setq url-automatic-caching t)
  (spacemacs/set-leader-keys "cd" 'youdao-dictionary-search-from-input)
  ;; (spacemacs/set-leader-keys "en" 'flycheck-next-error)
  ;; (spacemacs/set-leader-keys "ep" 'flycheck-previous-error)
  (spacemacs/set-leader-keys "wd" 'delete-window)
  (spacemacs/set-leader-keys "ag" 'helm-ag)
  (spacemacs/set-leader-keys "wq" 'neotree-hide)
  (spacemacs/set-leader-keys "ch" 'evil-search-highlight-persist-remove-all)
  ;; (spacemacs/set-leader-keys "jd" 'dumb-jump-go)
  (spacemacs/set-leader-keys "wo" 'delete-other-windows)
  (global-set-key (kbd "<S-up>") 'shrink-window)
  (global-set-key (kbd "<S-down>") 'enlarge-window)
  (global-set-key (kbd "<S-left>") 'shrink-window-horizontally)
  (global-set-key (kbd "<S-right>") 'enlarge-window-horizontally)

  (spacemacs/set-leader-keys "wy" 'winner-redo)
  (spacemacs/set-leader-keys "`" 'goto-last-change)
  (global-set-key (kbd "C-`") 'end-of-line)

  (defun revert-all-buffers ()
    "Refreshes all open buffers from their respective files."
    (interactive)
    (dolist (buf (buffer-list))
      (with-current-buffer buf
        (when (and (buffer-file-name) (file-exists-p (buffer-file-name)) (not (buffer-modified-p)))
          (revert-buffer t t t) )))
    (message "Refreshed open files.") )

  (spacemacs/set-leader-keys "bR" 'revert-all-buffers)

  (defun revert-buffer-no-confirm ()
    "Revert buffer without confirmation."
    (interactive) (revert-buffer t t))
  (spacemacs/set-leader-keys "br" 'revert-buffer-no-confirm)


  ;; 设置 neotree 主题
  (setq neo-theme 'nerd)

  (setq neo-vc-integration (quote (face)))
  ;; spacemacs/neotree-collapse-or-up

  (defun neotree-project-dir ()
    "Open NeoTree using the git root."
    (interactive)
    (let ((project-dir (ffip-project-root))
           (file-name (buffer-file-name)))
      (if project-dir
        (progn
          (neotree-dir project-dir)
          (neotree-find file-name))
        (message "Could not find git project root."))))
  (spacemacs/set-leader-keys "fc" 'neotree-project-dir)

  (with-eval-after-load 'neotree
    (define-key neotree-mode-map (kbd "h") 'spacemacs/neotree-collapse)
    (define-key neotree-mode-map (kbd "o") 'spacemacs/neotree-expand-or-open)
    ;; (define-key neotree-mode-map (kbd "yy") ,'neotree-copy-node)
    )

  ;; 已经有了 SPC b K
  (defun kill-other-buffers ()
    "Kill all other buffers."
    (interactive)
    (mapc 'kill-buffer (delq (current-buffer) (buffer-list))))
  (spacemacs/set-leader-keys "bo" 'spacemacs/kill-other-buffers)

  (defun kill-all-buffers ()
    (interactive)
    (mapc 'kill-buffer(buffer-list)))
  (spacemacs/set-leader-keys "ba" 'kill-all-buffers)

  ;; SPC r y
  (global-set-key (kbd "M-y") 'helm-show-kill-ring)
  (global-set-key (kbd "s-y") 'redo)

  (yas-global-mode t)
  ;; 系统剪切板数据在 evil mode 下可以正常使用
  (fset 'evil-visual-update-x-selection 'ignore)
  ;; 自定义 Snippet
  (add-to-list 'yas-snippet-dirs "~/.spacemacs.d/snippets/")

  (which-function-mode)

  ;; when editing js file, this feature is very useful
  (setq-default header-line-format
    ;; '((which-func-mode ("" buffer-file-name " "))))
    '(buffer-file-name "%f"
      (dired-directory dired-directory "%b")))

  ;; (setq-default mode-line-misc-info
    ;; (assq-delete-all 'which-function-mode mode-line-misc-info))

  ;; improve the performance of opening large file
  (add-hook 'org-mode-hook (lambda () (spacemacs/toggle-line-numbers-off)) 'append)
  (defun spacemacs/check-large-file ()
    (when (> (buffer-size) 80000)
      (progn (fundamental-mode)
        (hl-line-mode -1))))

  (add-hook 'find-file-hook 'spacemacs/check-large-file)

  ;; (setq js2-mode-show-parse-errors nil)

  (setq js2-mode-show-strict-warnings nil)

  (setq powerline-default-separator 'wave)
  ;; (setq spacemacs/toggle-mode-line-major-mode-p nil)
  ;; (setq mode-line-major-mode off)

  ;; (spaceline-toggle-major-mode-off)
  (spaceline-toggle-minor-modes-off)

  ;; (setq spaceline-show-default-input-method t)
  ;; (spaceline-define-segment lunaryorn-input-method
  ;;   "Current input method if non-default."
  ;;   (cond
  ;;     (current-input-method (propertize current-input-method-title
  ;;                             'face 'bold))
  ;;     (default-input-method (propertize (nth 3 (assoc default-input-method
  ;;                                                input-method-alist))
  ;;                             'face 'italic))
  ;;     (t "none"))
    ;; :enabled t)
  ;; (add-to-list 'spaceline-right 'lunaryorn-input-method)
  ;; (defun my-chinese-setup ()
  ;;   "Set up my private Chinese environment."
  ;;   ;; (if (equal current-language-environment "Chinese-GB")
    ;; (setq default-input-method "programmer-dvorak")
  ;;   )
    ;; )
  ;; (add-hook 'set-language-environment-hook 'my-chinese-setup)
  ;; (add-hook 'text-mode-hook 'my-chinese-setup)
  ;; (add-hook 'prog-mode-hook 'my-chinese-setup)
  ;; (add-hook 'text-mode-hook
  ;;   (lambda () (set-input-method "programmer-dvorak")))

  (spaceline-toggle-input-method-on)
  (spaceline-compile)
  ;; (spaceline-toggle-nyan-cat-off)
  ;; (spaceline-toggle-projectile-root-on)


  ;; (setq spaceline-which-function-p nil)
  ;; (setq spaceline-nyan-cat-p nil)
  ;; (setq spaceline-flycheck-info-p nil)
  ;; (setq spaceline-flycheck-error-p nil)
  ;; (setq spaceline-flycheck-warning-p nil)

  ;; (defun xah-new-empty-buffer ()
  ;;   "Open a new empty buffer.
  ;; URL `http://ergoemacs.org/emacs/emacs_new_empty_buffer.html'
  ;; Version 2015-06-12"
  ;;   (interactive)
  ;;   (let ((-buf (generate-new-buffer "untitled")))
  ;;     (switch-to-buffer -buf)
  ;;     (funcall (and initial-major-mode))
  ;;     (setq buffer-offer-save t)))
  ;; (spacemacs/set-leader-keys "bo" 'xah-new-empty-buffer)

  ;; 设置 gui 顶部显示当前 buffer 文件的 full-path
  (setq frame-title-format
    '(buffer-file-name "%f"
       (dired-directory dired-directory "%b")))
  ;; helm 查找文件时，file no exist 不创建 buffer
  (setq helm-ff-newfile-prompt-p nil)


  ;; (setq ido-use-faces t)
  ;; (set-face-attribute 'ido-vertical-first-match-face nil
  ;;   :background "#e5b7c0")
  ;; (set-face-attribute 'ido-vertical-only-match-face nil
  ;;   :background "#e52b50"
  ;;   :foreground "white")
  ;; (set-face-attribute 'ido-vertical-match-face nil
  ;;   :foreground "#b00000")

  ;; (require 'ido)
  ;; (ido-mode 'both)
  (setq ido-ignore-buffers '("\\` " "^\*grep*" "^\*scratch*" "^\*Messages*" "^\*emacs*" "^\*spacemacs*"))
  (setq iswitchb-buffer-ignore '("\\` " "^\*grep*" "^\*Messages*" "^\*emacs*" "^\*spacemacs*"))
  (setq helm-boring-buffer-regexp-list '("\\` " "\\*helm" "\\*helm-mode" "\\*Echo Area" "\\*Minibuf" "\\*Messages" "\\*scratch"))
  ;; (setq ido-ignore-buffers '("\\` " "^\*grep*" "^\*scratch*" "^\*emacs*" "^\*spacemacs*"))
  ;; (setq iswitchb-buffer-ignore '("\\` " "^\*grep*" "^\*emacs*" "^\*spacemacs*"))
  ;; (setq helm-boring-buffer-regexp-list '("\\` " "\\*helm" "\\*helm-mode" "\\*Echo Area" "\\*Minibuf" "\\*scratch"))


  ;; ======================= end setting  ===================
  )



(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
   (quote
    (helm-swoop youdao-dictionary names chinese-word-at-point yaml-mode ws-butler window-numbering which-key web-mode uuidgen use-package toc-org tern tagedit spacemacs-theme spaceline powerline smeargle smartparens slim-mode scss-mode sass-mode reveal-in-osx-finder restart-emacs rainbow-delimiters pug-mode popwin persp-mode pcre2el pbcopy paradox spinner osx-trash osx-dictionary org-pomodoro alert log4e gntp org-plus-contrib neotree mwim move-text mmm-mode markdown-toc markdown-mode linum-relative link-hint less-css-mode launchctl js2-mode info+ indent-guide ido-vertical-mode hydra hungry-delete htmlize hl-todo highlight-parentheses highlight-numbers parent-mode highlight-indent-guides hide-comnt help-fns+ helm-projectile projectile pkg-info epl helm-mode-manager helm-gitignore request helm-flx helm-descbinds helm-css-scss helm-company helm-ag haml-mode golden-ratio gnuplot gitignore-mode gitconfig-mode gitattributes-mode git-timemachine git-messenger git-link git-gutter-fringe+ git-gutter-fringe fringe-helper git-gutter+ git-gutter flx-ido flx find-file-in-project ivy fill-column-indicator expand-region exec-path-from-shell evil-visualstar evil-visual-mark-mode evil-tutor evil-surround evil-search-highlight-persist evil-numbers evil-nerd-commenter evil-matchit evil-magit magit magit-popup git-commit with-editor evil-indent-plus evil-iedit-state iedit evil-anzu anzu evil goto-chg undo-tree eval-sexp-fu highlight emmet-mode editorconfig dumb-jump f s diminish diff-hl company-web web-completion-data company-statistics company-quickhelp pos-tip company column-enforce-mode coffee-mode clean-aindent-mode bind-map bind-key auto-yasnippet yasnippet auto-highlight-symbol auto-complete aggressive-indent adaptive-wrap ace-window ace-link ace-jump-helm-line helm avy helm-core popup async quelpa package-build solarized-theme))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(company-tooltip-common ((t (:inherit company-tooltip :weight bold :underline nil))))
 '(company-tooltip-common-selection ((t (:inherit company-tooltip-selection :weight bold :underline nil)))))
