;; -*- mode: emacs-lisp -*-
;; This file is loaded by Spacemacs at startup.
;; It must be stored in your home directory.

(defun dotspacemacs/layers ()
  "Configuration Layers declaration.
You should not put any user code in this function besides modifying the variable
values."
  (setq-default
    ;; Base distribution to use. This is a layer contained in the directory
    ;; `+distribution'. For now available distributions are `spacemacs-base'
    ;; or `spacemacs'. (default 'spacemacs)
    dotspacemacs-distribution 'spacemacs
    ;; Lazy installation of layers (i.e. layers are installed only when a file
    ;; with a supported type is opened). Possible values are `all', `unused'
    ;; and `nil'. `unused' will lazy install only unused layers (i.e. layers
    ;; not listed in variable `dotspacemacs-configuration-layers'), `all' will
    ;; lazy install any layer that support lazy installation even the layers
    ;; listed in `dotspacemacs-configuration-layers'. `nil' disable the lazy
    ;; installation feature and you have to explicitly list a layer in the
    ;; variable `dotspacemacs-configuration-layers' to install it.
    ;; (default 'unused)
    dotspacemacs-enable-lazy-installation 'unused
    ;; If non-nil then Spacemacs will ask for confirmation before installing
    ;; a layer lazily. (default t)
    dotspacemacs-ask-for-lazy-installation t
    ;; If non-nil layers with lazy install support are lazy installed.
    ;; List of additional paths where to look for configuration layers.
    ;; Paths must have a trailing slash (i.e. `~/.mycontribs/')
    dotspacemacs-configuration-layer-path '(
                                             ;; "~/.emacs.d/private/layers/"
                                             )
    ;; List of configuration layers to load.
    dotspacemacs-configuration-layers
    '(
      ocaml
      ;; bibtex
      clojure
      ;; colors
      csv
      markdown
      ;; shadow-vue
      ;; octave
      ;; vimscript
      ivy
      html
      ;; dash
      javascript
      typescript
      ;; ----------------------------------------------------------------
      ;; Example of useful layers you may want to use right away.
      ;; Uncomment some layer names and press <SPC f e R> (Vim style) or
      ;; <M-m f e R> (Emacs style) to install them.
      ;; ----------------------------------------------------------------
      yaml
      helm
      search-engine
      ;; themes-megapack
      sql
      ;; better-defaults
      ;; osx
      emacs-lisp
      ;; git
      ;; react
      (vinegar :variables vinegar-reuse-dired-buffer t)
      (auto-completion :variables auto-completion-enable-sort-by-usage t
                        auto-completion-enable-snippets-in-popup t
                        auto-completion-complete-with-key-sequence-delay 0.1
                        auto-completion-enable-help-tooltip t
                        :disabled-for org markdown)
      ;; org
      (git :variables
        git-magit-status-fullscreen t)
      (shell :variables
             shell-default-height 30
             shell-default-position 'bottom)
      ;; spell-checking
      ;; syntax-checking
      ;; version-control
      shell-scripts
    )
    ;; List of additional packages that will be installed without being
    ;; wrapped in a layer. If you need some configuration for these

    ;; packages, then consider creating a layer. You can also put the
    ;; configuration in `dotspacemacs/user-config'.
    dotspacemacs-additional-packages '(
                                        ;; prettier-js
                                        all-the-icons
                                        all-the-icons-dired
                                        color-theme-sanityinc-tomorrow
                                        ;; spaceline-all-the-icons
                                        ;; color-theme-solarized
                                        ;; blank-mode
                                        suscolors-theme
                                        editorconfig
                                        exec-path-from-shell
                                        ;; dracula-theme
                                        diff-hl
                                        find-file-in-project
                                        ;; google-translate
                                        ;; google-translate-default-ui
                                        ;; forest-blue-theme
                                        ;; highlight-chars
                                        ;; flycheck
                                        string-inflection
                                        magit
                                        ;; nodejs-repl
                                        ;; material-theme
                                        ;; mmm-mode
                                        ;; stylus-mode
                                        git-gutter
                                        git-gutter+
                                        git-gutter-fringe
                                        git-gutter-fringe+
                                        highlight-indent-guides
                                        helm-projectile
                                        js2-mode
                                        ;; rjsx-mode
                                        solarized-theme
                                        ;; js3-mode
                                        keyfreq
                                        projectile
                                        neotree
                                        youdao-dictionary
                                        reveal-in-osx-finder
                                        ;; slim-mode
                                        ;; gotham-theme
                                        ;; monokai-theme
                                        atom-one-dark-theme
                                        doom-themes
                                        ;; doom-nlinum
                                        window-numbering
                                        ;; nlinum
                                        ;; nyan-mode
                                      )
    ;; A list of packages that cannot be updated.
    dotspacemacs-frozen-packages '()
    ;; A list of packages that will not be installed and loaded.
    dotspacemacs-excluded-packages '(
                                      ac-ispell
                                      slim-mode
                                      auto-dictionary
                                      chinese-word-at-point
                                      clang-format
                                      company-quickhelp
                                      company
                                      company-tern
                                      tern
                                      company-web
                                      counsel-projectile
                                      epic
                                      evil-escape
                                      dash
                                      disaster
                                      fancy-battery
                                      flycheck
                                      flx-ido
                                      google-translate

                                      ;; ggtags
                                      livid-mode
                                      ;; linum
                                      linum-relative
                                      ;; git-gutter
                                      ;; git-gutter-fringe
                                      ;; git-gutter-fringe+
                                      ;; helm
                                      helm-make
                                      helm-flyspell
                                      helm-purpose
                                      helm-spacemacs-help
                                      helm-themes
                                      ido-vertical-mode
                                      ;; js-doc
                                      launchctl
                                      lorem-ipsum
                                      ivy-purpose

                                      ;; magit-gh-pulls
                                      ;; magit-gitflow

                                      multiple-cursors
                                      pacemacs-purpose-popwin
                                      smeargle
                                      org-projectile
                                      spaceline
                                      spray
                                      tide
                                      window-purpose
                                      orgit
                                      org-timer
                                      org-download
                                      org-repo-todo
                                      osx-dictionary
                                    )
    ;; Defines the behaviour of Spacemacs when installing packages.
    ;; Possible values are `used-only', `used-but-keep-unused' and `all'.
    ;; `used-only' installs only explicitly used packages and uninstall any
    ;; unused packages as well as their unused dependencies.
    ;; `used-but-keep-unused' installs only the used packages but won't uninstall
    ;; them if they become unused. `all' installs *all* packages supported by
    ;; Spacemacs and never uninstall them. (default is `used-only')
    dotspacemacs-install-packages 'used-only))



(defun dotspacemacs/init ()
  ;; "Initialization function.
  ;; This function is called at the very startup of Spacemacs initialization
  ;; before layers configuration.
  ;; You should not put any user code in there besides modifying the variable
  ;; values."
  ;; This setq-default sexp is an exhaustive list of all the supported
  ;; spacemacs settings.
  (setq-default
    ;; If non nil ELPA repositories are contacted via HTTPS whenever it's
    ;; possible. Set it to nil if you have no way to use HTTPS in your
    ;; environment, otherwise it is strongly recommended to let it set to t.
    ;; This variable has no effect if Emacs is launched with the parameter
    ;; `--insecure' which forces the value of this variable to nil.
    ;; (default t)
    dotspacemacs-elpa-https t
    ;; Maximum allowed time in seconds to contact an ELPA repository.
    dotspacemacs-elpa-timeout 15
    ;; If non nil then spacemacs will check for updates at startup
    ;; when the current branch is not `develop'. Note that checking for
    ;; new versions works via git commands, thus it calls GitHub services
    ;; whenever you start Emacs. (default nil)
    dotspacemacs-check-for-update nil
    ;; If non-nil, a form that evaluates to a package directory. For example, to
    ;; use different package directories for different Emacs versions, set this
    ;; to `emacs-version'.
    dotspacemacs-elpa-subdirectory nil
    ;; One of `vim', `emacs' or `hybrid'.
    ;; `hybrid' is like `vim' except that `insert state' is replaced by the
    ;; `hybrid state' with `emacs' key bindings. The value can also be a list
    ;; with `:variables' keyword (similar to layers). Check the editing styles
    ;; section of the documentation for details on available variables.
    ;; (default 'vim)
    dotspacemacs-editing-style 'vim
    ;; If non nil output loading progress in `*Messages*' buffer. (default nil)
    dotspacemacs-verbose-loading nil
    ;; Specify the startup banner. Default value is `official', it displays
    ;; the official spacemacs logo. An integer value is the index of text
    ;; banner, `random' chooses a random text banner in `core/banners'
    ;; directory. A string value must be a path to an image format supported
    ;; by your Emacs build.
    ;; If the value is nil then no banner is displayed. (default 'official)
    ;; dotspacemacs-startup-banner 'official
    dotspacemacs-startup-banner 2
    ;; List of items to show in startup buffer or an association list of
    ;; the form `(list-type . list-size)`. If nil then it is disabled.
    ;; Possible values for list-type are:
    ;; `recents' `bookmarks' `projects' `agenda' `todos'."
    ;; List sizes may be nil, in which case
    ;; `spacemacs-buffer-startup-lists-length' takes effect.
    dotspacemacs-startup-lists '((recents . 20)
                                  ;; (projects . 5)
                                  )
    ;; True if the home buffer should respond to resize events.
    dotspacemacs-startup-buffer-responsive t
    ;; Default major mode of the scratch buffer (default `text-mode')
    dotspacemacs-scratch-mode 'text-mode
    ;; List of themes, the first of the list is loaded when spacemacs starts.
    ;; Press <SPC> T n to cycle to the next theme in the list (works great
    ;; with 2 themes variants, one dark and one light)
    dotspacemacs-themes '(
                           solarized-light
                           spacemacs-dark
                           solarized-dark
                           doom-one
                           ;; atom-one-dark
                           ;; dracula
                           ;; atom-dark
                           ;; material
                          )
    ;; If non nil the cursor color matches the state color in GUI Emacs.
    dotspacemacs-colorize-cursor-according-to-state t
    ;; Default font, or prioritized list of fonts. `powerline-scale' allows to
    ;; quickly tweak the mode-line size to make separators look not too crappy.
    dotspacemacs-default-font '(
                                 ;; "Source Code Pro"
                                 ;; :size 16

                                 ;; "Fira Code"
                                 ;; :size 15

                                 ;; "Anonymous pro"
                                 ;; :size 18

                                 ;; "Consolas"
                                 ;; :size 16

                                 ;; "Menlo"
                                 ;; :size 15

                                 ;; "DejaVu Sans Mono"
                                 ;; :size 16

                                 "Hack"
                                 :size 16

                                 ;; "Inconsolata"
                                 ;; :size 16

                                 ;; "Ubuntu Mono"
                                 ;; :size 18

                                 :weight normal
                                 :width normal
                                 :powerline-scale 1.1)
    ;; The leader key
    dotspacemacs-leader-key "SPC"
    ;; The key used for Emacs commands (M-x) (after pressing on the leader key).
    ;; (default "SPC")
    dotspacemacs-emacs-command-key "SPC"
    ;; The key used for Vim Ex commands (default ":")
    dotspacemacs-ex-command-key ":"
    ;; The leader key accessible in `emacs state' and `insert state'
    ;; (default "M-m")
    dotspacemacs-emacs-leader-key "M-m"
    ;; Major mode leader key is a shortcut key which is the equivalent of
    ;; pressing `<leader> m`. Set it to `nil` to disable it. (default ",")
    dotspacemacs-major-mode-leader-key ","
    ;; Major mode leader key accessible in `emacs state' and `insert state'.
    ;; (default "C-M-m")
    dotspacemacs-major-mode-emacs-leader-key "C-M-m"
    ;; These variables control whether separate commands are bound in the GUI to
    ;; the key pairs C-i, TAB and C-m, RET.
    ;; Setting it to a non-nil value, allows for separate commands under <C-i>
    ;; and TAB or <C-m> and RET.
    ;; In the terminal, these pairs are generally indistinguishable, so this only
    ;; works in the GUI. (default nil)
    dotspacemacs-distinguish-gui-tab nil
    ;; If non nil `Y' is remapped to `y$' in Evil states. (default nil)
    ;; dotspacemacs-remap-Y-to-y$ nil
    dotspacemacs-remap-Y-to-y$ t
    ;; If non-nil, the shift mappings `<' and `>' retain visual state if used
    ;; there. (default t)
    dotspacemacs-retain-visual-state-on-shift t
    ;; If non-nil, J and K move lines up and down when in visual mode.
    ;; (default nil)
    dotspacemacs-visual-line-move-text nil
    ;; If non nil, inverse the meaning of `g' in `:substitute' Evil ex-command.
    ;; (default nil)
    dotspacemacs-ex-substitute-global nil
    ;; Name of the default layout (default "Default")
    dotspacemacs-default-layout-name "fri3nds"
    ;; If non nil the default layout name is displayed in the mode-line.
    ;; (default nil)
    dotspacemacs-display-default-layout nil
    ;; If non nil then the last auto saved layouts are resume automatically upon
    ;; start. (default nil)
    dotspacemacs-auto-resume-layouts nil
    ;; Size (in MB) above which spacemacs will prompt to open the large file
    ;; literally to avoid performance issues. Opening a file literally means that
    ;; no major mode or minor modes are active. (default is 1)
    dotspacemacs-large-file-size 1
    ;; Location where to auto-save files. Possible values are `original' to
    ;; auto-save the file in-place, `cache' to auto-save the file to another
    ;; file stored in the cache directory and `nil' to disable auto-saving.
    ;; (default 'cache)
    ;; dotspacemacs-auto-save-file-location 'cache
    dotspacemacs-auto-save-file-location nil
    ;; Maximum number of rollback slots to keep in the cache. (default 5)
    dotspacemacs-max-rollback-slots 5
    ;; If non nil, `helm' will try to minimize the space it uses. (default nil)
    dotspacemacs-helm-resize nil
    ;; if non nil, the helm header is hidden when there is only one source.
    ;; (default nil)
    dotspacemacs-helm-no-header nil
    ;; define the position to display `helm', options are `bottom', `top',
    ;; `left', or `right'. (default 'bottom)
    dotspacemacs-helm-position 'bottom
    ;; Controls fuzzy matching in helm. If set to `always', force fuzzy matching
    ;; in all non-asynchronous sources. If set to `source', preserve individual
    ;; source settings. Else, disable fuzzy matching in all sources.
    ;; (default 'always)
    dotspacemacs-helm-use-fuzzy 'always
    ;; If non nil the paste micro-state is enabled. When enabled pressing `p`
    ;; several times cycle between the kill ring content. (default nil)
    dotspacemacs-enable-paste-transient-state nil
    ;; Which-key delay in seconds. The which-key buffer is the popup listing
    ;; the commands bound to the current keystroke sequence. (default 0.4)
    dotspacemacs-which-key-delay 0.4
    ;; Which-key frame position. Possible values are `right', `bottom' and
    ;; `right-then-bottom'. right-then-bottom tries to display the frame to the
    ;; right; if there is insufficient space it displays it at the bottom.
    ;; (default 'bottom)
    dotspacemacs-which-key-position 'bottom
    ;; If non nil a progress bar is displayed when spacemacs is loading. This
    ;; may increase the boot time on some systems and emacs builds, set it to
    ;; nil to boost the loading time. (default t)
    dotspacemacs-loading-progress-bar t
    ;; If non nil the frame is fullscreen when Emacs starts up. (default nil)
    ;; (Emacs 24.4+ only)
    dotspacemacs-fullscreen-at-startup nil
    ;; If non nil `spacemacs/toggle-fullscreen' will not use native fullscreen.
    ;; Use to disable fullscreen animations in OSX. (default nil)
    dotspacemacs-fullscreen-use-non-native nil
    ;; If non nil the frame is maximized when Emacs starts up.
    ;; Takes effect only if `dotspacemacs-fullscreen-at-startup' is nil.
    ;; (default nil) (Emacs 24.4+ only)
    ;; dotspacemacs-maximized-at-startup nil
    dotspacemacs-maximized-at-startup nil
    ;; A value from the range (0..100), in increasing opacity, which describes
    ;; the transparency level of a frame when it's active or selected.
    ;; Transparency can be toggled through `toggle-transparency'. (default 90)
    dotspacemacs-active-transparency 90
    ;; A value from the range (0..100), in increasing opacity, which describes
    ;; the transparency level of a frame when it's inactive or deselected.
    ;; Transparency can be toggled through `toggle-transparency'. (default 90)
    dotspacemacs-inactive-transparency 90
    ;; If non nil show the titles of transient states. (default t)
    dotspacemacs-show-transient-state-title t
    ;; If non nil show the color guide hint for transient state keys. (default t)
    dotspacemacs-show-transient-state-color-guide t
    ;; If non nil unicode symbols are displayed in the mode line. (default t)
    dotspacemacs-mode-line-unicode-symbols t
    ;; If non nil smooth scrolling (native-scrolling) is enabled. Smooth
    ;; scrolling overrides the default behavior of Emacs which recenters point
    ;; when it reaches the top or bottom of the screen. (default t)
    dotspacemacs-smooth-scrolling t
    ;; If non nil line numbers are turned on in all `prog-mode' and `text-mode'
    ;; derivatives. If set to `relative', also turns on relative line numbers.
    ;; (default nil)
    dotspacemacs-line-numbers nil
    ;; dotspacemacs-line-numbers 'relative
    ;; dotspacemacs-line-numbers t
    ;; Code folding method. Possible values are `evil' and `origami'.
    ;; (default 'evil)
    dotspacemacs-folding-method 'evil
    ;; If non-nil smartparens-strict-mode will be enabled in programming modes.
    ;; (default nil)
    dotspacemacs-smartparens-strict-mode nil
    ;; If non-nil pressing the closing parenthesis `)' key in insert mode passes
    ;; over any automatically added closing parenthesis, bracket, quote, etc…
    ;; This can be temporary disabled by pressing `C-q' before `)'. (default nil)
    dotspacemacs-smart-closing-parenthesis nil
    ;; Select a scope to highlight delimiters. Possible values are `any',
    ;; `current', `all' or `nil'. Default is `all' (highlight any scope and
    ;; emphasis the current one). (default 'all)
    dotspacemacs-highlight-delimiters 'all
    ;; If non nil, advise quit functions to keep server open when quitting.
    ;; (default nil)
    ;; dotspacemacs-persistent-server nil
    dotspacemacs-persistent-server t
    ;; List of search tool executable names. Spacemacs uses the first installed
    ;; tool of the list. Supported tools are `ag', `pt', `ack' and `grep'.
    ;; (default '("ag" "pt" "ack" "grep"))
    dotspacemacs-search-tools '("ag" "pt" "ack" "grep")
    ;; The default package repository used if no explicit repository has been
    ;; specified with an installed package.
    ;; Not used for now. (default nil)
    dotspacemacs-default-package-repository nil
    ;; Delete whitespace while saving buffer. Possible values are `all'
    ;; to aggressively delete empty line and long sequences of whitespace,
    ;; `trailing' to delete only the whitespace at end of lines, `changed'to
    ;; delete only whitespace for changed lines or `nil' to disable cleanup.
    ;; (default nil)
    ;; dotspacemacs-whitespace-cleanup nil
    dotspacemacs-whitespace-cleanup 'changed
  ))





(defun dotspacemacs/user-init ()
  "Initialization function for user code.
It is called immediately after `dotspacemacs/init', before layer configuration
executes.
 This function is mostly useful for variables that need to be set
before packages are loaded. If you are unsure, you should try in setting them in
`dotspacemacs/user-config' first."
  (setq configuration-layer--elpa-archives
        '(("melpa-cn" . "http://elpa.emacs-china.org/melpa/")
          ("org-cn"   . "http://elpa.emacs-china.org/org/")
          ("gnu-cn"   . "http://elpa.emacs-china.org/gnu/")
          ;; ("melpa" . "http://melpa.org/packages/")
          ;; ("melpa-stable" . "https://stable.melpa.org/packages/")
          ;; ("marmalade" . "http://marmalade-repo.org/packages/")
          ;; ("elpy" . "http://jorgenschaefer.github.io/packages/")
          ;; ("gnu" . "http://elpa.gnu.org/packages/")
           ))
  (setq exec-path-from-shell-arguments '("-l"))
  (setq purpose-mode nil)
  ;; (setq-default dotspacemacs-startup-banner '"/Users/fri3nds/Pictures/astrofish.png")
  )


(defun dotspacemacs/user-config ()
  "Configuration function for user code.
This function is called at the very end of Spacemacs initialization after
layers configuration.
This is the place where most of your configurations should be done. Unless it is
explicitly specified that a variable should be set before a package is loaded,
you should place your code here."


  ;; ======================= setting by myself ===================

  ;; (defvar best-gc-cons-threshold 8000000 "Best default gc threshold value. Should't be too big.")
  ;; (setq gc-cons-threshold most-positive-fixnum)
  ;; (setq gc-cons-threshold best-gc-cons-threshold)


  (define-fringe-bitmap 'right-curly-arrow
    [#b00000000
      #b00000000
      #b00000000
      #b00000000
      #b01110000
      #b00010000
      #b00010000
      #b00000000])
  (define-fringe-bitmap 'left-curly-arrow
    [#b00000000
      #b00001000
      #b00001000
      #b00001110
      #b00000000
      #b00000000
      #b00000000
      #b00000000])

  ;; (setq redisplay-dont-pause nil)
  (setq insert-directory-program "/usr/local/bin/gls")
  ;; (auto-save-mode -1)
  ;; (setq show-trailing-whitespace t)

  ;; (add-to-list 'yas-snippet-dirs "~/.spacemacs.d/snippets/")
  ;; (add-to-list 'load-path
    ;; (expand-file-name ""))
  ;; (setq helm-dash-enable-debugging nil)


  ;; the cursor creeps back when you go back to normal mode
  ;; (setq evil-move-cursor-back nil)


  ;; helm 查找文件时，file no exist 不创建 buffer
  (setq helm-ff-newfile-prompt-p nil)
  ;; (global-nlinum-mode)
  ;; (setq nlinum-format "%4d")

  ;; (setq ffip-project-root "~")


  (setq yas-snippet-dirs
    '(
       "~/.emacssnippets/snippets/"
       "~/.emacs.d/layers/+completion/auto-completion/local/snippets"))
  (setq yas-indent-line 'fixed)
  ;; (yas-reload-all)
  (yas-global-mode 1)
  ;; (nyan-mode)

  (eval-after-load "yasnippet"
    '(progn (defadvice yas--modes-to-activate (after my-simple-advise)
              ;; (when (or (eq major-mode 'sass-mode) (eq major-mode 'scss-mode))
              (when (eq major-mode 'sass-mode)
                (setq ad-return-value (remove 'haml-mode ad-return-value))))
       (ad-activate 'yas--modes-to-activate)))

  ;; (require 'doom-nlinum)
  ;; (setq blank-style '(mark))
  ;; (setq blank-chars '(tabs spaces space-before-atb space-after-tab))
  ;; (add-to-list 'custom-theme-load-path "~/.emacs.d/private/theme")
  ;; (require 'color-theme-tomorrow)

  ;; (load-theme 'material t)
  ;; (load-theme 'doom-one t)
  ;; (load-theme 'doom-tomorrow-night t)
  (load-theme 'sanityinc-tomorrow-night t)
  ;; (load-theme 'tomorrow-night-eighties t)
  ;; (load-theme 'suscolors t)


  ;; (modify-syntax-entry ?_ "w")
  ;; (modify-syntax-entry ?- "w")
  ;; (with-eval-after-load 'evil
  ;;   (defalias #'forward-evil-word #'forward-evil-symbol))

  (keyfreq-mode 1)
  (keyfreq-autosave-mode 1)

  ;; (setq pop-up-windows nil)
  ;; (setq pop-up-frames nil)

  (setq-default dired-omit-files-p t)
  (setq dired-recursive-deletes 'always)
  (setq dired-recursive-copies 'always)
  (setq-default neo-window-fixed-size nil)
  (setq dired-omit-files "^\\.DS_Store$\\|^\\.$")
  ;; (setq dired-omit-files "^\\.DS_Store$")

  ;; 显示行号
  ;; (setq linum-format "%4d ")
  ;; (global-linum-mode)
  ;; (linum-relative-global-mode)

  ;; add-to-list
  ;; (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
  (add-to-list 'auto-mode-alist '("\\.js[x]?\\'" . js2-jsx-mode))
  ;; (add-to-list 'magic-mode-alist '("^import React" . rjsx-mode))
  ;; (add-to-list 'auto-mode-alist '("\\.js[x]?\\'" . typescript-mode))
  (add-to-list 'auto-mode-alist '("\\.json\\'" . json-mode))
  (add-to-list 'auto-mode-alist '("\\.re\\'" . tuareg-mode))

  ;; 导致原生 SPC s s 不能使用了
  (setq pop-up-windows nil)
  (setq ns-pop-up-frames nil)
  (global-hungry-delete-mode t)
  (projectile-global-mode)

  ;; 不生成备份文件
  (setq make-backup-files nil)

  (add-hook 'react-mode-hook
            (lambda ()
              ;; Preferred comment style
              (setq comment-start "// "
                    comment-end "")
              ;; (global-flycheck-mode)
              ))

  ;; disable jshint since we prefer eslint checking
  ;; (setq-default flycheck-disabled-checkers
  ;;               (append flycheck-disabled-checkers
  ;;                       '(javascript-jshint)))

  ;; (add-hook 'js2-mode-hook #'global-flycheck-mode)
  ;; (add-hook 'typescript-mode-hook #'(lambda ()
  ;;                                     (prettier-js-mode 1)
  ;;                                     ))


  (add-hook 'org-mode-hook '(lambda ()
                              ;; turn on flyspell-mode by default
                              (flyspell-mode 1)
                              ;; C-TAB for expanding
                              ;; (local-set-key (kbd "C-<tab>")
                                ;; 'yas/expand-from-trigger-key)


                              ;; keybinding for editing source code blocks
                              ;; (local-set-key (kbd "C-c s e")
                              ;;   'org-edit-src-code)

                              ;; keybinding for inserting code blocks
                              ;; (local-set-key (kbd "C-c s i")
                                ;; 'org-insert-src-block)
                              ))



  (defun my/use-eslint-from-node-modules ()
    (let* ((root (locate-dominating-file
                  (or (buffer-file-name) default-directory)
                  "node_modules"))
           (eslint (and root
                        (expand-file-name "node_modules/eslint/bin/eslint.js"
                                          root))))
      (when (and eslint (file-executable-p eslint))
        (setq-local flycheck-javascript-eslint-executable eslint))))

  ;; (add-hook 'flycheck-mode-hook #'my/use-eslint-from-node-modules)


  ;; 实时加载最新文件
  ;; (setq load-prefer-newer t)
  (setq-default line-spacing 1)


  ;; (delete 'display 'font-lock-extra-managed-props)

  ;; (setq magit-commit-show-diff nil
  ;;       magit-revert-buffers 1)

  ;; (setq helm-buffer-max-length 50)

  ;; (tool-bar-mode -1)
  ;; (menu-bar-mode nil)

  (setq highlight-indent-guides-method 'character)
  (setq highlight-indent-guides-auto-character-face-perc 3)
  ;; (setq highlight-indent-guides-method 'column)


  (add-hook 'prog-mode-hook 'my-prog-mode-hook)
  (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)
  (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
  (add-hook 'dired-mode-hook 'diff-hl-dired-mode)
  (add-hook 'org-mode-hook (lambda () (spacemacs/toggle-line-numbers-off)) 'append)
  ;; (add-hook 'find-file-hook 'my-find-file-check-make-large-file)

  ;; (defun fri3nds-set-en-input ()
    ;; (set-input-method default-input-method))

  ;; (add-hook 'evil-normal-state-entry-hook 'deactivate-input-method)
  ;; (add-hook 'evil-insert-state-entry-hook 'deactivate-input-method)

  ;; improve the performance of opening large file
  (defun my-find-file-check-make-large-file ()
    (when (> (buffer-size) (* 1024 1024))
      (progn (fundamental-mode)
        (buffer-disable-undo)
        (hl-line-mode -1))))


  (defun my-prog-mode-hook ()
    "active after prog-mode"
    (interactive)
    ;; (yas-minor-mode 1)
    (auto-complete-mode 1)
    ;; (blank-mode t)
    (highlight-indent-guides-mode 1)
    ;; (fci-mode 1)
    (editorconfig-mode 1)
    )


  (defun kill-all-buffers ()
    (interactive)
    (mapc 'kill-buffer(buffer-list)))

  ;; 已经有了 SPC b K
  (defun neotree-project-dir ()
    "Open NeoTree using the git root."
    (interactive)
    (let ((project-dir (ffip-project-root))
          (file-name (buffer-file-name)))
      (if project-dir
          (progn
            (neotree-dir project-dir)
            (neotree-find file-name))
        (message "Could not find git project root."))))


  (defun revert-buffer-no-confirm ()
    "Revert buffer without confirmation."
    (interactive) (revert-buffer t t))


  (defun revert-all-buffers ()
    "Refreshes all open buffers from their respective files."
    (interactive)
    (dolist (buf (buffer-list))
      (with-current-buffer buf
        (when (and (buffer-file-name) (file-exists-p (buffer-file-name)) (not (buffer-modified-p)))
          (revert-buffer t t) t)))
    ;; (neo-buffer-refresh)
    ;; (neotree-project-dir)
    (message "Refreshed open files.") )


  (defun copy-string-to-clipboard (str)
    (when str
      (progn
        (kill-new str)
        (message "Copied buffer file name '%s' to the clipboard." str))))


  (defun last-index-of (regex str &optional ignore-case)
    (let ((start 0)
           (case-fold-search ignore-case)
           idx)
      (while (string-match regex str start)
        (setq idx (match-beginning 0))
        (setq start (match-end 0)))
      idx))

  (defun just-get-buffer-file-the-name ()
    (interactive)
    (let ((bf (or (buffer-file-name) list-buffers-directory)))
      (if bf
        (copy-string-to-clipboard (file-name-sans-extension
                                    (substring bf
                                      (+ 1 (last-index-of "/" bf)))))
        (message "buffer-file-name not exist"))))


  ;;   URL `http://ergoemacs.org/emacs/emacs_navigating_keys_for_brackets.html'



  (defvar js-left-brackets '("{" "[" "("))
  (defun js-backward-parent-backet ()
    "找到最近的上一级的{或者[符号"
    (interactive)
    (progn
      (setq loop-num 0)
      (while (< loop-num 1)
        (search-backward-regexp (regexp-opt js-left-brackets) nil t)
        (setq loop-num (1+ loop-num)))))

  (defun kill-other-buffers (&optional arg)
    "Kill all other buffers.
If the universal prefix argument is used then will the windows too."
    (interactive "P")
    (mapc 'kill-buffer (delq (current-buffer) (buffer-list)))
    (when (equal '(4) arg) (delete-other-windows))
    (message (format "Killing all buffers except -- \"%s\" "
               (buffer-name))))


  ;; (defun neo-buffer--refresh (save-pos-p &optional non-neotree-buffer)
  (defun neo-buffer-refresh (&optional non-neotree-buffer)
    "Refresh the NeoTree buffer.
If SAVE-POS-P is non-nil, it will be auto save current line number."
    (let ((start-node neo-buffer--start-node))
      (unless start-node
        (setq start-node default-directory))

      (neo-buffer--with-editing-buffer
        ;; save context
        ;; (when save-pos-p
          ;; (neo-buffer--save-cursor-pos))
        (when non-neotree-buffer
          (setq neo-buffer--start-node start-node))
        ;; starting refresh
        (erase-buffer)
        (neo-buffer--node-list-clear)
        (neo-buffer--insert-banner)
        (setq neo-buffer--start-line neo-header-height)
        (neo-buffer--insert-tree start-node 1))
      ;; restore context
      ;; (neo-buffer--goto-cursor-pos)
      ))

  (defcustom use-chinese-word-segmentation nil
    "If Non-nil, support Chinese word segmentation(中文分词).
See URL `https://github.com/xuchunyang/chinese-word-at-point.el' for more info."
    :type 'boolean)

  (defun my-region-or-word ()
    "Return word in region or word at point."
    (if (use-region-p)
      (buffer-substring-no-properties (region-beginning)
        (region-end))
      (thing-at-point (if use-chinese-word-segmentation
                        'chinese-or-other-word
                        'word)
        t)))


  (defun my-prompt-input ()
    "Prompt input object for translate."
    (let ((current-word (my-region-or-word)))
      (read-string (format "Word (%s): "
                     (or current-word ""))
        nil nil
        current-word)))

  (defun search-google-symbol ()
    "google搜索当前选中或者停留的字符"
    (interactive)
    (let ((sym (my-prompt-input)))
        (engine/search-google sym)))

  ;; (defun shrink-works-camel ()
  ;;   (interactive)
  ;;   (let* ((words (split-string (my-region-or-word) "\s+"))
  ;;           (toggle-words (map 'list 'upper-firsr-char words)))
  ;;     (replace-rectangle (region-beginning)
  ;;       (region-end)
  ;;       (insert (reduce #'(lambda (pre next)
  ;;                           (concatenate 'string pre next))
  ;;                 toggle-words
  ;;                 :initial-value "")))))


  (defun upper-firsr-char (str)
    (when (and str (> (length str) 0))
      (let ((first-char (substring str nil 1))
            (rest-str   (substring str 1)))
        (concat (capitalize first-char) rest-str))))


  (defun toggle-string-case (str)
    (let ((upper-str (upcase str)))
      (if (string= upper-str str)
        (downcase str)
        upper-str)))

  ;; (defun upper-first-char-of-word-at-point ()
  ;;   (interactive)
  ;;   (let ((str (thing-at-point 'word))
  ;;          (bounds (bounds-of-thing-at-point 'word)))
  ;;     (when (and str (> (length str) 0))
  ;;       (let ((first-char (substring str nil 1))
  ;;              (rest-str (substring str 1)))
  ;;         (delete-region (car bounds) (cdr bounds))
  ;;         (insert (concat (toggle-string-case first-char) rest-str))))))



  ;; http://wenshanren.org/?p=327
  ;; thanks to the author
  (defun org-insert-src-block (src-code-type)
    "Insert a `SRC-CODE-TYPE' type source code block in org-mode."
    (interactive
      (let ((src-code-types
              '("emacs-lisp" "python" "C" "sh" "java" "js" "clojure" "C++" "css"
                 "calc" "asymptote" "dot" "gnuplot" "ledger" "lilypond" "mscgen"
                 "octave" "oz" "plantuml" "R" "sass" "screen" "sql" "awk" "ditaa"
                 "haskell" "latex" "lisp" "matlab" "ocaml" "org" "perl" "ruby"
                 "scheme" "sqlite")))
        (list (ido-completing-read "Source code type: " src-code-types))))
    (progn
      (newline-and-indent)
      (insert (format "#+BEGIN_SRC %s\n" src-code-type))
      (newline-and-indent)
      (insert "#+END_SRC\n")
      (previous-line 2)
      (org-edit-src-code)))

  (defun fri3nds-kill-this-buffer ()
    (interactive)
    (if (equal "*Youdao Dictionary*" (format "%s" (current-buffer)))
      (kill-buffer-and-window)
      (spacemacs/kill-this-buffer)))


  (spacemacs/set-leader-keys "ng" 'search-google-symbol)

  ;; hot-key
  (spacemacs/set-leader-keys "aa" 'evil-avy-goto-line)
  (spacemacs/set-leader-keys "ag" 'counsel-ag)
  (spacemacs/set-leader-keys "bd" 'fri3nds-kill-this-buffer)
  (spacemacs/set-leader-keys "bb" 'helm-buffers-list)
  (spacemacs/set-leader-keys "bc" 'erase-buffer)
  ;; (spacemacs/set-leader-keys "ag" 'helm-ag)
  (spacemacs/set-leader-keys "gg" 'spacemacs/helm-project-do-ag-region-or-symbol)
  (spacemacs/set-leader-keys "ba" 'kill-all-buffers)
  (spacemacs/set-leader-keys "be" 'spacemacs/new-empty-buffer)
  (spacemacs/set-leader-keys "bo" 'kill-other-buffers)
  ;; (spacemacs/set-leader-keys "br" 'revert-buffer-no-confirm)
  (spacemacs/set-leader-keys "br" 'revert-all-buffers)
  (spacemacs/set-leader-keys "cc" 'neotree-project-dir)
  (spacemacs/set-leader-keys "cd" 'youdao-dictionary-search-from-input)
  ;; (spacemacs/set-leader-keys "cd" 'google-translate-at-point)
  (spacemacs/set-leader-keys "ch" 'spacemacs/evil-search-clear-highlight)
  ;; (spacemacs/set-leader-keys "dc" 'helm-dash-at-point)
  (spacemacs/set-leader-keys "dd" 'dired-jump)
  (spacemacs/set-leader-keys "df" 'magit-diff-buffer-file)
  (spacemacs/set-leader-keys "dt" 'magit-diff-working-tree)
  (spacemacs/set-leader-keys "ee" 'git-gutter+-next-hunk)
  ;; (spacemacs/set-leader-keys "fn" 'flycheck-next-error)

  (spacemacs/set-leader-keys "by" 'just-get-buffer-file-the-name)
  (spacemacs/set-leader-keys "bf" 'reveal-in-osx-finder)
  (spacemacs/set-leader-keys "fd" 'spacemacs/delete-current-buffer-file)
  (spacemacs/set-leader-keys "fr" 'spacemacs/rename-current-buffer-file)
  ;; (spacemacs/set-leader-keys "ff" 'counsel-find-file)
  (spacemacs/set-leader-keys "fy" 'spacemacs/show-and-copy-buffer-filename)

  (spacemacs/set-leader-keys "gb" 'magit-blame)
  ;; (spacemacs/set-leader-keys "gg" 'magit-log-all-branches)
  (spacemacs/set-leader-keys "gh" 'magit-log-all)
  (spacemacs/set-leader-keys "hh" 'previous-buffer)
  (spacemacs/set-leader-keys "ii" 'evilnc-comment-or-uncomment-lines)
  ;; (spacemacs/set-leader-keys "jj" 'avy-goto-char)
  (spacemacs/set-leader-keys "jj" 'counsel-recentf)

  ;; (spacemacs/set-leader-keys "kk" 'helm-projectile-find-file)
  (spacemacs/set-leader-keys "kk" 'find-file-in-project)
  (spacemacs/set-leader-keys "mm" 'helm-show-kill-ring)
  (spacemacs/set-leader-keys "mp" 'markdown-live-preview-mode)

  ;; (spacemacs/set-leader-keys "mb" 'xah-backward-left-bracket)
  ;; (spacemacs/set-leader-keys "mn" 'xah-forward-right-bracket)
  ;; (spacemacs/set-leader-keys "nn" 'js-backward-parent-backet)

  (spacemacs/set-leader-keys "xx" 'backward-up-list)
  (spacemacs/set-leader-keys "xy" 'up-list)
  ;; (spacemacs/set-leader-keys "nc" 'neotree-copy-node)

  (spacemacs/set-leader-keys "nn" 'next-buffer)

  (spacemacs/set-leader-keys "qq" 'neotree-hide)
  ;; (spacemacs/set-leader-keys "ss" 'counsel-grep)
  (spacemacs/set-leader-keys "ss" 'swiper)
  (spacemacs/set-leader-keys "sf" 'counsel-grep-or-swiper)
  (spacemacs/set-leader-keys "se" 'org-insert-src-block)
  (spacemacs/set-leader-keys "si" 'org-insert-src-block)
  ;; (spacemacs/set-leader-keys "ss" 'spacemacs/helm-file-smart-do-search)
  ;; (spacemacs/set-leader-keys "sf" 'spacemacs/helm-swoop-region-or-symbol)


  (spacemacs/set-leader-keys "wd" 'delete-window)
  (spacemacs/set-leader-keys "wo" 'delete-other-windows)
  (spacemacs/set-leader-keys "wy" 'winner-redo)
  (spacemacs/set-leader-keys "tt" 'neotree-toggle)
  (spacemacs/set-leader-keys "ts" 'counsel-load-theme)
  (spacemacs/set-leader-keys "yy" 'spacemacs/copy-whole-buffer-to-clipboard)
  (spacemacs/set-leader-keys "zz" 'eshell)


  (spacemacs/set-leader-keys "`" 'goto-last-change)
  (global-set-key (kbd "<f1>") 'next-buffer)
  (global-set-key (kbd "<f8>") 'dired-jump)
  (global-set-key (kbd "<f9>") 'neotree-toggle)
  (global-set-key (kbd "M-y") 'helm-show-kill-ring)
  ;; (global-set-key (kbd "s-b") 'helm-mini)
  ;; (global-set-key (kbd "s-k") 'helm-projectile-find-file)
  (global-set-key (kbd "s-j") 'avy-goto-char)
  (global-set-key (kbd "s-f") 'evil-ex-search-forward)
  (global-set-key (kbd "s-y") 'redo)
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  (define-key evil-normal-state-map (kbd "L") 'evil-end-of-line)
  (define-key evil-visual-state-map (kbd "L") 'evil-end-of-line)
  ;; (define-key evil-normal-state-map (kbd "L") 'end-of-line)
  (define-key evil-normal-state-map (kbd "H") 'evil-beginning-of-line)
  (define-key evil-visual-state-map (kbd "H") 'evil-beginning-of-line)
  ;; (define-key evil-normal-state-map (kbd "DEL") 'evil-goto-first-line)
  ;; (define-key evil-visual-state-map (kbd "DEL") 'evil-goto-first-line)
  ;; (define-key evil-normal-state-map (kbd "RET") 'evil-goto-line)
  ;; (define-key evil-visual-state-map (kbd "RET") 'evil-goto-line)
  (define-key evil-normal-state-map (kbd "zM") 'evil-open-folds)
  ;; (define-key evil-normal-state-map (kbd "/") 'evil-ex-search-forward)
  ;; (define-key evil-visual-state-map (kbd "/") 'evil-ex-search-forward)
  ;; (define-key evil-normal-state-map (kbd "n") 'evil-ex-search-next)
  ;; (define-key evil-visual-state-map (kbd "n") 'evil-ex-search-next)
  ;; (define-key evil-normal-state-map (kbd "N") 'evil-ex-search-previous)
  ;; (define-key evil-visual-state-map (kbd "N") 'evil-ex-search-previous)

  ;; (global-set-key (kbd "s-u") 'upper-first-char-of-word-at-point)
  ;; (global-set-key (kbd "s-i") 'shrink-works-camel)
  (global-set-key (kbd "s-u") 'string-inflection-toggle)


  (global-set-key (kbd "<S-up>") 'shrink-window)
  (global-set-key (kbd "<S-down>") 'enlarge-window)
  (global-set-key (kbd "<S-left>") 'shrink-window-horizontally)
  (global-set-key (kbd "<S-right>") 'enlarge-window-horizontally)
  (global-set-key (kbd "<s-left>") 'beginning-of-line-text)
  (global-set-key (kbd "<s-right>") 'end-of-line)

  (global-set-key (kbd "s-0") 'spacemacs/persp-switch-to-0)
  (global-set-key (kbd "s-1") 'spacemacs/persp-switch-to-1)
  ;; hot-key


  (setq url-automatic-caching t)

  ;; 系统剪切板数据在 evil mode 下可以正常使用
  (fset 'evil-visual-update-x-selection 'ignore)

  (setq js2-mode-show-strict-warnings nil)

  ;; 设置 neotree 主题
  ;; (setq neo-theme (if (display-graphic-p) 'icons 'arrow))
  (setq neo-theme 'icons)
  (setq neo-vc-integration (quote (char)))

  (with-eval-after-load 'neotree
    (define-key neotree-mode-map (kbd "h") 'spacemacs/neotree-collapse)
    (define-key neotree-mode-map (kbd "o") 'spacemacs/neotree-expand-or-open)
    (define-key neotree-mode-map (kbd "y") 'neotree-copy-node)
    (setq-default neo-show-updir-line t)
    (setq neo-show-hidden-files nil)
    (setq-default neo-hidden-regexp-list '("^\\." "\\.pyc$" "~$" "^#.*#$" "\\.elc$" "\\.DS_Store$" "^node_modules" "babel_cache"))
    )





  ;; (defun lx/layout-format-name (name pos)
  ;;   "Format the layout name given by NAME for display in mode-line."
  ;;   (let* ((layout-name (if (file-directory-p name)
  ;;                           (file-name-nondirectory (directory-file-name name))
  ;;                         name))
  ;;         (string-name (format "%s" layout-name))
  ;;         (current (equal name (spacemacs//current-layout-name)))
  ;;         (caption (concat (number-to-string (if (eq 9 pos) 0 (1+ pos)))
  ;;                           ". " string-name)))
  ;;     (if current
  ;;         (propertize (concat "❰❰ " caption " ❱❱") 'face 'warning)
  ;;       caption)))


  ;; (defun lx/layouts-for-title-bar ()
  ;;   "Return a one liner string containing all the layout names."
  ;;   (let* ((persp-list (or (persp-names-current-frame-fast-ordered)
  ;;                         (list persp-nil-name)))
  ;;         (formatted-persp-list
  ;;           (concat " "
  ;;                   (mapconcat (lambda (persp)
  ;;                               (lx/layout-format-name
  ;;                                 persp (position persp persp-list)))
  ;;                             persp-list "          "))))
  ;;     formatted-persp-list))


  ;; (setq frame-title-format '(:eval (lx/layouts-for-title-bar)))
  (defun fri3nds/buffer-format-name (name pos)
    "Format the layout name given by NAME for display in mode-line."
    (let* ((string-name (format "%s" name))
            (current (equal string-name (format "%s"(buffer-name))))
            (caption (concat (number-to-string (1+ pos))
                       ". " string-name)))
      (if current
        ;; (propertize (concat "❰❰ " caption " ❱❱") 'face 'font-lock-constant-face)
        ;; (propertize (concat "「 " caption " 」") 'face 'font-lock-constant-face)
        (propertize (concat "『 " caption " 』") 'face 'font-lock-constant-face)
        caption)))

  (defun not-string-match-some-list-ietm (regex-list str)
    (not (catch 'break
           (dolist (regex-item regex-list)
             (when (string-match-p regex-item str)
               (throw 'break t))))))

  (defun filter-buffer-list ()
    (let ((filter-buffers '("\\` " "\\*helm" "\\*helm-mode" "\\*Echo Area" "\\*Minibuf" "\\*Messages")))
      (seq-filter (lambda (elt)
                    (not-string-match-some-list-ietm filter-buffers (format "%s" elt)))
      (buffer-list))))

  (defun fri3nds/buffer-list-for-title-bar()
    "Return a one liner string containing all the buffer names."
    (let* ((list-of-buffer (filter-buffer-list))
    ;; (let* ((list-of-buffer (buffer-list))
            (format-buffer-name
              (concat " "
                (mapconcat (lambda (buf)
                             (fri3nds/buffer-format-name
                               buf (position buf list-of-buffer)))
                  list-of-buffer "       "))))
      format-buffer-name))

  ;; (setq frame-title-format '(:eval (fri3nds/buffer-list-for-title-bar)))
  ;; (setq frame-title-format
  ;;   '(buffer-file-name "%f"
  ;;      (dired-directory dired-directory "%b")))

  (setq frame-title-format
    '((:eval (if (buffer-file-name)
               (abbreviate-file-name (buffer-file-name))
               "%b"))))


  ;; (which-function-mode)
  (setq-default header-line-format "%b")

  ;; (setq-default header-line-format '(:eval (fri3nds/buffer-list-for-title-bar)))


  ;; 设置 gui 顶部显示当前 buffer 文件的 full-path
  ;; (setq frame-title-format
  ;;       '(buffer-file-name "%f"
  ;;                          (dired-directory dired-directory "%b")))


  ;; format-mode-line
  (defun custom-update-persp-name ()
    (when (bound-and-true-p persp-mode)
      ;; There are multiple implementations of
      ;; persp-mode with different APIs
      (progn
        (or (not (string= persp-nil-name (safe-persp-name (get-frame-persp))))
            "Default")
        (let ((name (safe-persp-name (get-frame-persp))))
          (propertize (concat " " name " ")
                      'face 'font-lock-preprocessor-face
                      'help-echo "Current Layout name.")))))

  (defun spaceline--unicode-number (str)
    "Return a nice unicode representation of a single-digit number STR."
    (cond
      ;; ((string= "1" str) "◀➊▶")
      ;; ((string= "1" str) "1⃣")

      ((string= "1" str) "➊")
      ((string= "2" str) "➋")
      ((string= "3" str) "➌")
      ((string= "4" str) "➍")
      ((string= "5" str) "➎")
      ((string= "6" str) "➏")
      ((string= "7" str) "➐")
      ((string= "8" str) "➑")
      ((string= "9" str) "➒")
      ((string= "0" str) "➓")
      ;; ((string= "1" str) "①")
      ;; ((string= "2" str) "②")
      ;; ((string= "3" str) "③")
      ;; ((string= "4" str) "④")
      ;; ((string= "5" str) "⑤")
      ;; ((string= "6" str) "⑥")
      ;; ((string= "7" str) "⑦")
      ;; ((string= "8" str) "⑧")
      ;; ((string= "9" str) "⑨")
      ;; ((string= "0" str) "⑩")
      ))

  (window-numbering-mode)

  (defun window-number-mode-line ()
    "The current window number. Requires `window-numbering-mode' to be enabled."
    (when (bound-and-true-p window-numbering-mode)
      (let* ((num (window-numbering-get-number))
             (str (when num (int-to-string num))))
        (spaceline--unicode-number str))))

  (defun mode-line-fill (face reserve)
    "Return empty space using FACE and leaving RESERVE space on the right."
    (unless reserve
      (setq reserve 20))
    (when (and window-system (eq 'right (get-scroll-bar-mode)))
      (setq reserve (- reserve 3)))
    (propertize " "
                'display `((space :align-to
                                  (- (+ right right-fringe right-margin) ,reserve)))
                'face face))

  (defun buffer-encoding-abbrev ()
    "The line ending convention used in the buffer."
    (let ((buf-coding (format "%s" buffer-file-coding-system)))
      (if (string-match "\\(dos\\|unix\\|mac\\)" buf-coding)
          (match-string 1 buf-coding)
        buf-coding)))

  (setq my-flycheck-mode-line
    '(:eval
       (pcase flycheck-last-status-change
         (`not-checked nil)
         (`no-checker (propertize " -" 'face 'warning))
         (`running (propertize " ✷" 'face 'success))
         (`errored (propertize " !" 'face 'error))
         (`finished
           (let* ((error-counts (flycheck-count-errors flycheck-current-errors))
                   (no-errors (cdr (assq 'error error-counts)))
                   (no-warnings (cdr (assq 'warning error-counts)))
                   (face (cond (no-errors 'error)
                           (no-warnings 'warning)
                           (t 'success))))
             (propertize (format "[%s/%s]" (or no-errors 0) (or no-warnings 0)) 'face face)))
         (`interrupted " -")
         (`suspicious '(propertize " ?" 'face 'warning)))))



  (setq-default mode-line-format
    (list
      " %1"
      '(:eval (propertize
                (window-number-mode-line)
                'face
                'font-lock-keyword-face))

      '(:eval (custom-update-persp-name))

      "%1 "
      ;; the buffer name; the file name as a tool tip
      '(:eval (propertize "%b " 'face 'font-lock-keyword-face
                'help-echo (buffer-file-name)))

      (propertize "%I" 'face 'font-lock-constant-face) ;; size
      " "

      " " ;; insert vs overwrite mode, input-method in a tooltip
      '(:eval (propertize (if overwrite-mode "Ovr" "Ins")
                'face 'font-lock-preprocessor-face
                'help-echo (concat "Buffer is in "
                             (if overwrite-mode
                               "overwrite"
                               "insert") " mode")))

      ;; was this buffer modified since the last save?
      '(:eval (when (buffer-modified-p)
                (concat ","  (propertize "Mod"
                               'face 'font-lock-warning-face
                               'help-echo "Buffer has been modified"))))

      ;; is this buffer read-only?
      '(:eval (when buffer-read-only
                (concat ","  (propertize "RO"
                               'face 'font-lock-warning-face
                               'help-echo "Buffer is read-only"))))
      "    "

      ;; anzu
      anzu--mode-line-format

      ;; relative position, size of file
      (propertize "%p" 'face 'font-lock-constant-face) ;; % above top

      ;; line and column
      " " ;; '%02' to set to 2 chars at least; prevents flickering
      "("
      (propertize "%4l" 'face 'font-lock-type-face)
      ","
      (propertize "%4c" 'face 'font-lock-type-face)
      ")"

      ;; the current major mode for the buffer.
      "    "
      '(:eval (propertize "%m" 'face 'font-lock-string-face
                'help-echo buffer-file-coding-system))

      ;; my-flycheck-mode-line
      ;; evil state
      " "
      '(:eval evil-mode-line-tag)

      ;; minor modes
      ;; minor-mode-alist
      ;; git info
      " "
      `(vc-mode vc-mode)
      " "

      ;; global-mode-string goes in mode-line-misc-info
      mode-line-misc-info

      ;; (mode-line-fill 'mode-line 30)

      ;; (propertize "%z" 'face 'font-lock-type-face)

      ;; mode-line-end-spaces
      ;; add the time, with the date and the emacs uptime in the tooltip
      ;; '(:eval (propertize (format-time-string "%a, %Y %m %d, %H:%M") 'face 'font-lock-constant-face))
      "  "
      '(:eval (buffer-encoding-abbrev))

      "    "
      ;; '(:eval (list (nyan-create)))
      ))

  ;; (use-package spaceline-all-the-icons
  ;;   :after spaceline
  ;;   :init (setq spaceline-all-the-icons-separator-type 'slant)
  ;;   :config (spaceline-all-the-icons-theme))

  ;; (spaceline-all-the-icons--setup-anzu)            ;; Enable anzu searching
  ;; (spaceline-all-the-icons--setup-package-updates) ;; Enable package update indicator
  ;; (spaceline-all-the-icons--setup-git-ahead)       ;; Enable # of commits ahead of upstream in git
  ;; (spaceline-all-the-icons--setup-paradox)         ;; Enable Paradox mode line
  ;; (spaceline-all-the-icons--setup-neotree)         ;; Enable Neotree mode line


  (setq ido-ignore-buffers '("\\` " "^\*grep*" "^\*scratch*" "^\*Messages*" "^\*emacs*" "^\*spacemacs*"))
  (setq iswitchb-buffer-ignore '("\\` " "^\*grep*" "^\*Messages*" "^\*emacs*" "^\*spacemacs*"))
  (setq helm-boring-buffer-regexp-list '("\\` " "\\*helm" "\\*helm-mode" "\\*Echo Area" "\\*Minibuf" "\\*Messages" "\\*scratch"))

  ;; (setq ido-ignore-buffers '("\\` " "^\*grep*" "^\*scratch*" "^\*emacs*" "^\*spacemacs*"))
  ;; (setq iswitchb-buffer-ignore '("\\` " "^\*grep*" "^\*emacs*" "^\*spacemacs*"))
  ;; (setq helm-boring-buffer-regexp-list '("\\` " "\\*helm" "\\*helm-mode" "\\*Echo Area" "\\*Minibuf" "\\*scratch"))

  ;; 设置 git-gutter
  (global-git-gutter+-mode)
  (git-gutter:linum-setup)
  ;; (setq git-gutter-fr:side 'right-fringe)
  ;; (setq-default right-fringe-width  20)
  ;; (set-face-foreground 'git-gutter-fr:modified "yellow")
  ;; (set-face-foreground 'git-gutter-fr:added    "green")
  ;; (set-face-foreground 'git-gutter-fr:deleted  "#D62C2C")
  ;; (set-face-foreground 'git-gutter-fr:deleted  "red")

  ;; (menu-bar-mode -1)
  ;; (spacemacs/toggle-menu-bar-off)

  ;; ======================= ending by myself ===================


  )


(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(evil-want-Y-yank-to-eol t)
 '(package-selected-packages
   (quote
    (string-inflection youdao-dictionary yaml-mode xterm-color ws-butler winum window-numbering which-key wgrep web-mode web-beautify volatile-highlights vi-tilde-fringe uuidgen utop use-package typescript-mode tuareg toc-org tagedit suscolors-theme sql-indent solarized-theme smex skewer-mode shell-pop scss-mode sass-mode reveal-in-osx-finder restart-emacs rainbow-delimiters pug-mode popwin persp-mode pcre2el paradox org-plus-contrib org-bullets open-junk-file ocp-indent neotree multi-term move-text mmm-mode merlin markdown-toc magit-gitflow macrostep link-hint less-css-mode keyfreq json-mode js2-refactor js-doc ivy-hydra insert-shebang info+ indent-guide hungry-delete hl-todo highlight-parentheses highlight-numbers highlight-indentation highlight-indent-guides hide-comnt help-fns+ helm-swoop helm-projectile helm-mode-manager helm-gitignore helm-flx helm-descbinds helm-css-scss helm-company helm-c-yasnippet helm-ag golden-ratio gitconfig-mode gitattributes-mode git-timemachine git-messenger git-link git-gutter-fringe git-gutter-fringe+ gh-md fuzzy fish-mode find-file-in-project fill-column-indicator eyebrowse expand-region exec-path-from-shell evil-visualstar evil-visual-mark-mode evil-unimpaired evil-tutor evil-surround evil-search-highlight-persist evil-numbers evil-nerd-commenter evil-mc evil-matchit evil-magit evil-lisp-state evil-indent-plus evil-iedit-state evil-exchange evil-ediff evil-args evil-anzu eshell-z eshell-prompt-extras esh-help engine-mode emmet-mode elisp-slime-nav editorconfig dumb-jump doom-themes diff-hl define-word csv-mode counsel company-statistics column-enforce-mode color-theme-sanityinc-tomorrow coffee-mode clojure-snippets clj-refactor clean-aindent-mode cider-eval-sexp-fu auto-yasnippet auto-highlight-symbol auto-complete auto-compile atom-one-dark-theme all-the-icons-dired aggressive-indent adaptive-wrap ace-window ace-link ace-jump-helm-line))))

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(show-paren-match ((t (:underline (:color "#CE4045"))))))
